// *** DO NOT EDIT. GENERATED BY PRISMIX. ***
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Log {
  id Int @id @default(autoincrement())

  @@map("logs")
}

model Employee {
  id             Int             @id @default(autoincrement())
  username       String          @unique
  password       String
  firstName      String
  lastName       String
  email          String          @unique
  isActive       Boolean         @default(true)
  ipVerification Boolean         @default(true)
  profileImg     String?
  createdAt      DateTime        @default(now())
  createdBy      String
  authority      Authority       @default(MODERATOR)
  ipRequests     IPRequest[]     @relation(name: "EmployeeToIPRequest")
  verificatedIPs VerificatedIP[] @relation(name: "EmployeeToVerificatedIP")

  @@map("employees")
}

model IPRequest {
  id         Int      @id @default(autoincrement())
  address    String
  employeeId Int
  createdAt  DateTime @default(now())
  createdBy  Employee @relation(name: "EmployeeToIPRequest", fields: [employeeId], references: [id])

  @@map("ipRequests")
}

model VerificatedIP {
  id         Int      @id @default(autoincrement())
  address    String
  employeeId Int
  employee   Employee @relation(name: "EmployeeToVerificatedIP", fields: [employeeId], references: [id])

  @@map("verificatedIPs")
}

model User {
  id             String              @id @default(uuid())
  username       String?             @unique
  password       String?
  firstName      String
  lastName       String
  email          String              @unique
  isActive       ClientIsActive
  createdBy      CreatedByStrategies @default(LOCAL)
  lang           Lang                @default(en)
  accountType    AccountType         @default(CLIENT)
  userDetails    UserDetails?        @relation(name: "UserToUserDetails")
  refreshTokens  RefreshToken[]      @relation(name: "RefreshTokenToUser")
  creatorDetails CreatorDetails?     @relation(name: "CreatorDetailsToUser")

  @@map("users")
}

model UserDetails {
  id          Int          @id @default(autoincrement())
  userId      String       @unique
  profileImg  String?
  birthDate   DateTime?
  gender      Gender       @default(OTHER)
  createdAt   DateTime     @default(now())
  user        User         @relation(name: "UserToUserDetails", fields: [userId], references: [id])
  userAddress UserAddress? @relation(name: "UserAddressToUserDetails")

  @@map("users_details")
}

model UserAddress {
  id            Int         @id @default(autoincrement())
  userDetailsId Int         @unique
  phoneNumber   String?
  country       String?
  city          String?
  zipCode       String?
  address1      String?
  address2      String?
  userDetails   UserDetails @relation(name: "UserAddressToUserDetails", fields: [userDetailsId], references: [id])

  @@map("users_addresses")
}

model CreatorDetails {
  id          Int     @id @default(autoincrement())
  userId      String  @unique
  user        User    @relation(name: "CreatorDetailsToUser", fields: [userId], references: [id])
  verificated Boolean @default(false)

  @@map("creator_details")
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  userId    String
  ipAddress String
  createdAt DateTime @default(now())
  token     String
  user      User     @relation(name: "RefreshTokenToUser", fields: [userId], references: [id])

  @@map("refresh_tokens")
}

enum Authority {
  ROOT
  ADMIN
  MODERATOR
  IT_SUPPORT
  DATA_SUPPORT
  CLIENT_SUPPORT
}

enum AccountType {
  CLIENT
  CREATOR
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Lang {
  en
  pl
}

enum ClientIsActive {
  IS_ACTIVE
  BLOCKED
  EMAIL_VERIFICATION
  PROFILE_NOT_COMPLETE
}

enum CreatedByStrategies {
  LOCAL
  FACEBOOK
  GOOGLE
}
